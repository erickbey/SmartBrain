{"ast":null,"code":"import _slicedToArray from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particle_engine;\n\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray, loadParticlesOptions } from \"../Utils/Utils\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\n\nvar fixOutMode = function fixOutMode(data) {\n  if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n\n    _Particle_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    var pxRatio = container.retina.pixelRatio,\n        mainOptions = container.actualOptions,\n        particlesOptions = loadParticlesOptions(mainOptions.particles);\n    var shapeType = particlesOptions.shape.type,\n        reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    var zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    var sizeOptions = this.options.size,\n        sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    var sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.bubble = {\n      inRange: false\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    var canvasSize = container.canvas.size,\n        moveCenterPerc = this.options.move.center;\n    this.moveCenter = {\n      x: canvasSize.width * moveCenterPerc.x / 100,\n      y: canvasSize.height * moveCenterPerc.y / 100,\n      radius: this.options.move.center.radius\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    var gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.offset = Vector.origin;\n    var particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n\n    var _iterator = _createForOfIteratorHelper(container.particles.updaters),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var updater = _step.value;\n\n        if (updater.init) {\n          updater.init(this);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var _iterator2 = _createForOfIteratorHelper(container.particles.movers),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var mover = _step2.value;\n\n        if (mover.init) {\n          mover.init(this);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(container.plugins),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            plugin = _step3$value[1];\n\n        if (plugin.particleCreated) {\n          plugin.particleCreated(this);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  _createClass(Particle, [{\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a, _b;\n\n      var color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n      if (color && this.roll && (this.backColor || this.roll.alter)) {\n        var backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n            backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          }\n\n          if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n          }\n        }\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      if (this.unbreakable) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      var _iterator5 = _createForOfIteratorHelper(this.container.plugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              plugin = _step5$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = this.options.destroy;\n\n      if (destroyOptions.mode === \"split\") {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.opacity) {\n        this.opacity.loops = 0;\n      }\n\n      this.size.loops = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n\n      var rate = getValue(splitOptions.rate);\n\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b, _c, _d;\n\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              plugin = _step6$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = function fixHorizontal(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: function setCb(value) {\n            return pos.x += value;\n          },\n          radius: radius\n        });\n      },\n          fixVertical = function fixVertical(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: function setCb(value) {\n            return pos.y += value;\n          },\n          radius: radius\n        });\n      };\n\n      fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n      fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n      fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n      fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n\n      var overlapOptions = collisionsOptions.overlap;\n\n      if (overlapOptions.enable) {\n        return false;\n      }\n\n      var retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      var overlaps = false;\n\n      var _iterator7 = _createForOfIteratorHelper(this.container.particles.array),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var particle = _step7.value;\n\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return overlaps;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value);\n      var radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset);\n      var range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadShapeData\",\n    value: function loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n  }, {\n    key: \"loadLife\",\n    value: function loadLife() {\n      var container = this.container,\n          particlesOptions = this.options,\n          lifeOptions = particlesOptions.life,\n          life = {\n        delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n\n      if (life.duration <= 0) {\n        life.duration = -1;\n      }\n\n      if (life.count <= 0) {\n        life.count = -1;\n      }\n\n      return life;\n    }\n  }]);\n\n  return Particle;\n}();\n_Particle_engine = new WeakMap();","map":{"version":3,"sources":["C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/tsparticles-engine/esm/Core/Particle.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","colorToRgb","getHslFromAnimation","deepExtend","isInArray","itemFromArray","loadParticlesOptions","Shape","Vector","Vector3d","alterHsl","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","load","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","bubble","inRange","calcPosition","zLayers","initialPosition","copy","canvasSize","canvas","moveCenterPerc","center","moveCenter","x","width","y","height","direction","initialVelocity","calculateVelocity","moveDecay","decay","gravityOptions","gravity","acceleration","inverse","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","shadowColor","shadow","color","updaters","updater","init","movers","mover","particleInit","plugin","particleCreated","isInsideCanvas","getRadius","delta","drawParticlePlugin","drawParticle","PI","roll","backColor","alter","backFactor","mode","backSum","rolled","floor","angle","strokeColor","getFillColor","override","particleDestroyed","destroyOptions","destroy","split","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","length","lifeOptions","delayTime","duration","time","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray, loadParticlesOptions } from \"../Utils/Utils\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nconst fixOutMode = (data) => {\n    if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type, reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenterPerc = this.options.move.center;\n        this.moveCenter = {\n            x: (canvasSize.width * moveCenterPerc.x) / 100,\n            y: (canvasSize.height * moveCenterPerc.y) / 100,\n            radius: this.options.move.center.radius,\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const gravityOptions = this.options.move.gravity;\n        this.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        for (const mover of container.particles.movers) {\n            if (mover.init) {\n                mover.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.options.roll.mode === \"both\" ? 2 : 1, backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getValue(splitOptions.rate);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value);\n        const radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset);\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container, particlesOptions = this.options, lifeOptions = particlesOptions.life, life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}