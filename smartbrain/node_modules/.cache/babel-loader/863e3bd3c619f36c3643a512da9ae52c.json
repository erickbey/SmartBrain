{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\erick\\\\Documents\\\\portfolio-projects\\\\smartbrain\\\\smartbrain\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce } from \"tsparticles-engine\";\nexport var Bouncer = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Bouncer, _ExternalInteractorBa);\n\n  var _super = _createSuper(Bouncer);\n\n  function Bouncer(container) {\n    _classCallCheck(this, Bouncer);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Bouncer, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv;\n      return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var container, options, events, mouseMoveStatus, hoverEnabled, hoverMode, divs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n\n                if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n                  this.processMouseBounce();\n                } else {\n                  divModeExecute(\"bounce\", divs, function (selector, div) {\n                    return _this.singleSelectorBounce(selector, div);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"processMouseBounce\",\n    value: function processMouseBounce() {\n      var container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          tolerance = 10 * pxRatio,\n          mousePos = container.interactivity.mouse.position,\n          radius = container.retina.bounceModeDistance;\n\n      if (mousePos) {\n        this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n      }\n    }\n  }, {\n    key: \"singleSelectorBounce\",\n    value: function singleSelectorBounce(selector, div) {\n      var _this2 = this;\n\n      var container = this.container,\n          query = document.querySelectorAll(selector);\n\n      if (!query.length) {\n        return;\n      }\n\n      query.forEach(function (item) {\n        var elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n            radius = elem.offsetWidth / 2 * pxRatio,\n            tolerance = 10 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n\n        _this2.processBounce(pos, radius, area);\n      });\n    }\n  }, {\n    key: \"processBounce\",\n    value: function processBounce(position, radius, area) {\n      var query = this.container.particles.quadTree.query(area);\n\n      var _iterator = _createForOfIteratorHelper(query),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n\n          if (area instanceof Circle) {\n            circleBounce(circleBounceDataFromParticle(particle), {\n              position: position,\n              radius: radius,\n              mass: Math.pow(radius, 2) * Math.PI / 2,\n              velocity: Vector.origin,\n              factor: Vector.origin\n            });\n          } else if (area instanceof Rectangle) {\n            rectBounce(particle, calculateBounds(position, radius));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return Bouncer;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","calculateBounds","circleBounce","circleBounceDataFromParticle","divModeExecute","isDivModeEnabled","isInArray","mouseMoveEvent","rectBounce","Bouncer","container","options","actualOptions","mouse","interactivity","events","divs","onDiv","position","onHover","enable","mode","mouseMoveStatus","status","hoverEnabled","hoverMode","processMouseBounce","selector","div","singleSelectorBounce","pxRatio","retina","pixelRatio","tolerance","mousePos","radius","bounceModeDistance","processBounce","x","y","query","document","querySelectorAll","length","forEach","item","elem","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","area","type","particles","quadTree","particle","mass","Math","PI","velocity","origin","factor"],"mappings":";;;;;;;AAAA,SAASA,MAAT,EAAiBC,sBAAjB,EAAyCC,SAAzC,EAAoDC,MAApD,EAA4DC,eAA5D,EAA6EC,YAA7E,EAA2FC,4BAA3F,EAAyHC,cAAzH,EAAyIC,gBAAzI,EAA2JC,SAA3J,EAAsKC,cAAtK,EAAsLC,UAAtL,QAAyM,oBAAzM;AACA,WAAaC,OAAb;AAAA;;AAAA;;AACI,mBAAYC,SAAZ,EAAuB;AAAA;;AAAA,6BACbA,SADa;AAEtB;;AAHL;AAAA;AAAA,WAII,qBAAY;AACR,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCC,OAAO,GAAGD,SAAS,CAACE,aAAtD;AAAA,UAAqEC,KAAK,GAAGH,SAAS,CAACI,aAAV,CAAwBD,KAArG;AAAA,UAA4GE,MAAM,GAAGJ,OAAO,CAACG,aAAR,CAAsBC,MAA3I;AAAA,UAAmJC,IAAI,GAAGD,MAAM,CAACE,KAAjK;AACA,aAASJ,KAAK,CAACK,QAAN,IAAkBH,MAAM,CAACI,OAAP,CAAeC,MAAjC,IAA2Cd,SAAS,CAAC,QAAD,EAAWS,MAAM,CAACI,OAAP,CAAeE,IAA1B,CAArD,IACJhB,gBAAgB,CAAC,QAAD,EAAWW,IAAX,CADpB;AAEH;AARL;AAAA;AAAA;AAAA,+EASI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACUN,gBAAAA,SADV,GACsB,KAAKA,SAD3B,EACsCC,OADtC,GACgDD,SAAS,CAACE,aAD1D,EACyEG,MADzE,GACkFJ,OAAO,CAACG,aAAR,CAAsBC,MADxG,EACgHO,eADhH,GACkIZ,SAAS,CAACI,aAAV,CAAwBS,MAAxB,KAAmChB,cADrK,EACqLiB,YADrL,GACoMT,MAAM,CAACI,OAAP,CAAeC,MADnN,EAC2NK,SAD3N,GACuOV,MAAM,CAACI,OAAP,CAAeE,IADtP,EAC4PL,IAD5P,GACmQD,MAAM,CAACE,KAD1Q;;AAEI,oBAAIK,eAAe,IAAIE,YAAnB,IAAmClB,SAAS,CAAC,QAAD,EAAWmB,SAAX,CAAhD,EAAuE;AACnE,uBAAKC,kBAAL;AACH,iBAFD,MAGK;AACDtB,kBAAAA,cAAc,CAAC,QAAD,EAAWY,IAAX,EAAiB,UAACW,QAAD,EAAWC,GAAX;AAAA,2BAAmB,KAAI,CAACC,oBAAL,CAA0BF,QAA1B,EAAoCC,GAApC,CAAnB;AAAA,mBAAjB,CAAd;AACH;;AAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAkBI,iBAAQ,CACP;AAnBL;AAAA;AAAA,WAoBI,8BAAqB;AACjB,UAAMlB,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCoB,OAAO,GAAGpB,SAAS,CAACqB,MAAV,CAAiBC,UAA7D;AAAA,UAAyEC,SAAS,GAAG,KAAKH,OAA1F;AAAA,UAAmGI,QAAQ,GAAGxB,SAAS,CAACI,aAAV,CAAwBD,KAAxB,CAA8BK,QAA5I;AAAA,UAAsJiB,MAAM,GAAGzB,SAAS,CAACqB,MAAV,CAAiBK,kBAAhL;;AACA,UAAIF,QAAJ,EAAc;AACV,aAAKG,aAAL,CAAmBH,QAAnB,EAA6BC,MAA7B,EAAqC,IAAItC,MAAJ,CAAWqC,QAAQ,CAACI,CAApB,EAAuBJ,QAAQ,CAACK,CAAhC,EAAmCJ,MAAM,GAAGF,SAA5C,CAArC;AACH;AACJ;AAzBL;AAAA;AAAA,WA0BI,8BAAqBN,QAArB,EAA+BC,GAA/B,EAAoC;AAAA;;AAChC,UAAMlB,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC8B,KAAK,GAAGC,QAAQ,CAACC,gBAAT,CAA0Bf,QAA1B,CAA1C;;AACA,UAAI,CAACa,KAAK,CAACG,MAAX,EAAmB;AACf;AACH;;AACDH,MAAAA,KAAK,CAACI,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB,YAAMC,IAAI,GAAGD,IAAb;AAAA,YAAmBf,OAAO,GAAGpB,SAAS,CAACqB,MAAV,CAAiBC,UAA9C;AAAA,YAA0De,GAAG,GAAG;AAC5DT,UAAAA,CAAC,EAAE,CAACQ,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACG,WAAL,GAAmB,CAAtC,IAA2CnB,OADc;AAE5DS,UAAAA,CAAC,EAAE,CAACO,IAAI,CAACI,SAAL,GAAiBJ,IAAI,CAACK,YAAL,GAAoB,CAAtC,IAA2CrB;AAFc,SAAhE;AAAA,YAGGK,MAAM,GAAIW,IAAI,CAACG,WAAL,GAAmB,CAApB,GAAyBnB,OAHrC;AAAA,YAG8CG,SAAS,GAAG,KAAKH,OAH/D;AAAA,YAGwEsB,IAAI,GAAGxB,GAAG,CAACyB,IAAJ,KAAa,QAAb,GACzE,IAAIxD,MAAJ,CAAWkD,GAAG,CAACT,CAAf,EAAkBS,GAAG,CAACR,CAAtB,EAAyBJ,MAAM,GAAGF,SAAlC,CADyE,GAEzE,IAAIlC,SAAJ,CAAc+C,IAAI,CAACE,UAAL,GAAkBlB,OAAlB,GAA4BG,SAA1C,EAAqDa,IAAI,CAACI,SAAL,GAAiBpB,OAAjB,GAA2BG,SAAhF,EAA2Fa,IAAI,CAACG,WAAL,GAAmBnB,OAAnB,GAA6BG,SAAS,GAAG,CAApI,EAAuIa,IAAI,CAACK,YAAL,GAAoBrB,OAApB,GAA8BG,SAAS,GAAG,CAAjL,CALN;;AAMA,QAAA,MAAI,CAACI,aAAL,CAAmBU,GAAnB,EAAwBZ,MAAxB,EAAgCiB,IAAhC;AACH,OARD;AASH;AAxCL;AAAA;AAAA,WAyCI,uBAAclC,QAAd,EAAwBiB,MAAxB,EAAgCiB,IAAhC,EAAsC;AAClC,UAAMZ,KAAK,GAAG,KAAK9B,SAAL,CAAe4C,SAAf,CAAyBC,QAAzB,CAAkCf,KAAlC,CAAwCY,IAAxC,CAAd;;AADkC,iDAEXZ,KAFW;AAAA;;AAAA;AAElC,4DAA8B;AAAA,cAAnBgB,QAAmB;;AAC1B,cAAIJ,IAAI,YAAYvD,MAApB,EAA4B;AACxBK,YAAAA,YAAY,CAACC,4BAA4B,CAACqD,QAAD,CAA7B,EAAyC;AACjDtC,cAAAA,QAAQ,EAARA,QADiD;AAEjDiB,cAAAA,MAAM,EAANA,MAFiD;AAGjDsB,cAAAA,IAAI,EAAG,SAAAtB,MAAM,EAAI,CAAJ,CAAN,GAAcuB,IAAI,CAACC,EAApB,GAA0B,CAHiB;AAIjDC,cAAAA,QAAQ,EAAE5D,MAAM,CAAC6D,MAJgC;AAKjDC,cAAAA,MAAM,EAAE9D,MAAM,CAAC6D;AALkC,aAAzC,CAAZ;AAOH,WARD,MASK,IAAIT,IAAI,YAAYrD,SAApB,EAA+B;AAChCS,YAAAA,UAAU,CAACgD,QAAD,EAAWvD,eAAe,CAACiB,QAAD,EAAWiB,MAAX,CAA1B,CAAV;AACH;AACJ;AAfiC;AAAA;AAAA;AAAA;AAAA;AAgBrC;AAzDL;;AAAA;AAAA,EAA6BrC,sBAA7B","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this.processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n        }\n    }\n    reset() {\n    }\n    processMouseBounce() {\n        const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n        if (mousePos) {\n            this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        }\n    }\n    singleSelectorBounce(selector, div) {\n        const container = this.container, query = document.querySelectorAll(selector);\n        if (!query.length) {\n            return;\n        }\n        query.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, radius + tolerance)\n                : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n            this.processBounce(pos, radius, area);\n        });\n    }\n    processBounce(position, radius, area) {\n        const query = this.container.particles.quadTree.query(area);\n        for (const particle of query) {\n            if (area instanceof Circle) {\n                circleBounce(circleBounceDataFromParticle(particle), {\n                    position,\n                    radius,\n                    mass: (radius ** 2 * Math.PI) / 2,\n                    velocity: Vector.origin,\n                    factor: Vector.origin,\n                });\n            }\n            else if (area instanceof Rectangle) {\n                rectBounce(particle, calculateBounds(position, radius));\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}