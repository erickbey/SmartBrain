{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\erick\\\\Documents\\\\portfolio-projects\\\\smartbrain\\\\smartbrain\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _PolygonMaskInstance_engine;\n\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray, noPolygonDataLoaded, noPolygonFound } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container, engine) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n\n    _PolygonMaskInstance_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _PolygonMaskInstance_engine, engine, \"f\");\n\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options,\n          polygonDraw = options.draw;\n\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n              path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n\n              case 5:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n          options = this.options;\n      var position;\n\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var path = itemFromArray(this.paths),\n          distance = Math.floor(Math.random() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.actualOptions,\n          polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(noPolygonDataLoaded);\n      var offset = 0,\n          point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0),\n          distance = totalLength / options.particles.number.value;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n                matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n                finalPath = new Path2D(),\n                transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n                __classPrivateFieldGet(this, _PolygonMaskInstance_engine, \"f\").dispatchEvent(\"polygonMaskLoaded\", {\n                  container: this.container\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n\n      return initRawData;\n    }()\n  }]);\n\n  return PolygonMaskInstance;\n}();\n_PolygonMaskInstance_engine = new WeakMap();","map":{"version":3,"sources":["C:/Users/erick/Documents/portfolio-projects/smartbrain/smartbrain/node_modules/tsparticles-plugin-polygon-mask/esm/PolygonMaskInstance.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_PolygonMaskInstance_engine","calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","itemFromArray","noPolygonDataLoaded","noPolygonFound","PolygonMask","PolygonMaskInstance","container","engine","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","drawPoints","position","_a","_b","length","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","stroke","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","canvasSize","canvas","size","Math","random","inside","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D","dispatchEvent","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PolygonMaskInstance_engine;\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray, noPolygonDataLoaded, noPolygonFound, } from \"tsparticles-engine\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container, engine) {\n        this.container = container;\n        _PolygonMaskInstance_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _PolygonMaskInstance_engine, engine, \"f\");\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n        __classPrivateFieldGet(this, _PolygonMaskInstance_engine, \"f\").dispatchEvent(\"polygonMaskLoaded\", {\n            container: this.container,\n        });\n    }\n}\n_PolygonMaskInstance_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}